/**
 * 
 */
package main;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;

import javax.swing.JPanel;

/**
 * 
 */
public class GamePanel extends JPanel implements Runnable {

	// Screen settings
	final int originalTileSize = 16; // 16x16 tile
	final int scale = 3;

	final int tileSize = originalTileSize * scale; // 48x48 tile
	final int maxScreenCol = 18;
	final int maxScreenRow = 14;
	final int screenWidth = tileSize * maxScreenCol;
	final int screenHeight = tileSize * maxScreenRow;

	// FPS
	int framesPerSecond = 60;

	KeyHandler keyHandler = new KeyHandler();
	Thread gameThread;

	// Set player default pos
	int playerX = 100;
	int playerY = 100;
	int playerSpeed = 4;

	public GamePanel() {

		this.setPreferredSize(new Dimension(screenWidth, screenHeight));
		this.setBackground(Color.black);
		this.setDoubleBuffered(true);
		this.addKeyListener(keyHandler);
		this.setFocusable(true);
	}

	public void startGameThread() {
		gameThread = new Thread(this);
		gameThread.start();
	}

	@Override
	public void run() {

		double drawInterval = 1000000000 / framesPerSecond; // 0.0166666 seconds
		double nextDrawTime = System.nanoTime() + drawInterval;

		while (gameThread != null) {

			// 1. Update - Update information, camera pos, character pos etc
			update();

			// 2. Draw - render/draw the game scenes with updated info
			repaint();

			try {
				double remainingTime = nextDrawTime - System.nanoTime();
				remainingTime = remainingTime / 1000000;

				if (remainingTime < 0) {
					remainingTime = 0;
				}

				Thread.sleep((long) remainingTime);

				nextDrawTime += drawInterval;

			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	public void update() {

		// Vertical movement: up vs. down
		if (keyHandler.upPressed && !keyHandler.downPressed) {
			playerY -= playerSpeed;
		} else if (keyHandler.downPressed && !keyHandler.upPressed) {
			playerY += playerSpeed;
		}

		// Horizontal movement: left vs. right
		if (keyHandler.leftPressed && !keyHandler.rightPressed) {
			playerX -= playerSpeed;
		} else if (keyHandler.rightPressed && !keyHandler.leftPressed) {
			playerX += playerSpeed;
		}
	}

	public void paintComponent(Graphics g) {
		super.paintComponent(g);

		Graphics2D g2D = (Graphics2D) g;

		g2D.setColor(Color.white);
		g2D.fillRect(playerX, playerY, tileSize, tileSize);

		g2D.dispose();
	}
}
